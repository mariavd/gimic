#!/bin/bash

# Function definitions:
source  @SCRIPTS_DIR@/functions-def

checkIfInputExists

printf "\nStarting current profile analysis\n"
printf "\nUsing atomic units of length\n\n"

echo "Define the bond perpendicular to which to integrate"; echo
echo "Enter the indices of the atoms according to the coord file"
printf "Atom 1:  "; read atom1; 
printf "Atom 2:  "; read atom2
bond=$atom1","$atom2

dirname=current_profile_$atom1.$atom2
#echo $dirname

checkIfPreviousCalculationExists "$dirname"

# if [ -z $dir ] # if the path does not contain "current_profile", $dir is empty, so the directory either does not exist, or we are not inside it
# then
#     #echo "Currently not in the directory current_profile"
#     if [ -d $dirname ] 
#     then
# 	printf "\n\n*** Directory already exists.\n\nCalculation parameters:\n"
# 	grep "bond=\|fixed=\|up=\|down=\|MF=" $dirname/gimic.Inp
# 	echo "Enter [y] to overwrite or any key to exit."; read accept
# 	if [ -z $accept ] || [ ! $accept == "y" ]  # if the variable is empty or different from "y", exit 
# 	then 
# 	    exit
# 	else
# 	    rm -f $dirname/*out $dirname/*inp # Remove leftover input and output to avoid confusion
# 	fi 
# checkPreviousCalc fixed $fixed
# else
# 	if [ -e MOL ] && [ -e XDENS ] && [ -e coord ]
# 	then
# 	    mkdir $dirname
# 	    cp coord $dirname/
# 	    echo "Directory $dirname created."; echo
# 	else
# 	    echo "Please run the current profile analysis from a directory containing the files MOL, XDENS and coord"
# 	    exit
# 	fi # end if MOL, XDENS, coord exist
#     fi # end if current_profile_#.#
# fi # end if directory current_profile_#.# exists or we are inside it

echo "The default position of the integration plane is at the midpoint of the bond."
distance=$( awk -v a1="$atom1" -v a2="$atom2" '{ if (NR == a1+1) { x+=$1;y+=$2;z+=$3;}; if (NR == a2+1) {x-=$1;y-=$2;z-=$3} } END{ dist=sqrt(x*x+y*y+z*z); print dist*0.5; }' coord ; )
valueInp distance $distance

# Coordinates of the centre:
BOND=$(centroid $atom1 $atom2)
Bx=$( echo $BOND | awk '{print $1} ' )
By=$( echo $BOND | awk '{print $2} ' )
Bz=$( echo $BOND | awk '{print $3} ' )

#echo "Bond centre coordinates:"
#printf "("$Bx";"$By";"$Bz")\n"

# Check if there already is an input file
#if [ -f $dirname/calculation.dat ] 
#then
#    fixed=$( sed -n -e 's/^.*fixed=*//p' $dirname/calculation.dat | awk 'BEGIN { FS = "," } ; { print $2 }' )
#fi
# # If there was not a previous calculation, $fixed will be empty. Ask if it should be changed
# if [ ! -z $fixed ] 
# then
#     printf "\nThe previously selected fixed atom is $fixed.\nPress [n] to change\n"
#     read accept
# fi
# # If the $fixed is empty or the user wants to change it, ask to enter 
# if [[ ( -z $fixed ) || ( ! -z $accept  &&  "$accept" == "n" ) ]]
#     then 
#         printf "\nEnter the index of the fixed atom:\n"
#         read fixed
# fi


echo

# Read the coordinates of atom1:
A1z=$( awk -v atom1=$atom1 '{ if (NR==(atom1+1)) {print $3} }' coord  )

# Read the coordinates of atom2:
A2x=$( awk -v atom2=$atom2 '{ if (NR==(atom2+1)) {print $1} }' coord  )
A2y=$( awk -v atom2=$atom2 '{ if (NR==(atom2+1)) {print $2} }' coord  )
A2z=$( awk -v atom2=$atom2 '{ if (NR==(atom2+1)) {print $3} }' coord  )

Fx=$(calculateFixedCoord $A2x $A2y $A2z | awk '{print $1}')
Fy=$(calculateFixedCoord $A2x $A2y $A2z | awk '{print $2}')
#Fz=$( awk -v A1z=$A1z -v A2z=$A2z 'BEGIN{ print (A1z+A2z)*0.5 }')
Fz=$( awk -v A1z=$A1z -v A2z=$A2z 'BEGIN{ print A2z }')

echo "Fixed coordinate: ($Fx; $Fy; $Fz)"

printf "\n\nSTARTING POINT OF THE INTEGRATION\n"
userInp start $start

printf "\nEND POINT OF THE INTEGRATION\n"
out=10
printf "\nDo you accept out=$out bohr?"
userInp out $out

printf "\n\nUPPER AND LOWER BOUNDS OF THE INTEGRATION\n"
up=10
down=-10
valueInp up $up 
valueInp down $down

printf "\n\nWIDTH OF THE SLICES\n"
delta=0.02
valueInp delta $delta

nsteps=$( awk -v start=$start -v out=$out -v delta=$delta 'BEGIN{if (start > 0) {start = -start}; nsteps=(out-start)/delta; if (nsteps > 0) {printf("%d",nsteps)} else {printf("%d",-nsteps);}; }'   )

#Practice has shown that for delta=0.1, the spacing value should be 0.02 in order to have at least 9 Gaussian points per slice
# If the delta is smaller than 0.1, recalculate:
# spacingFactor=$( awk -v delta=$delta 'BEGIN{ printf("%.4f",delta/0.02) }' )    # how many times smaller the chosen delta value is
# spacing=$( awk -v f=$spacingFactor 'BEGIN{ printf("%.3f",0.013*f) }' )
spacingX=$( awk -v delta=$delta 'BEGIN{ f=delta/0.02; printf("%.3f",1.00*f); }' )
spacingY=$( awk -v delta=$delta 'BEGIN{ f=delta/0.02; printf("%.3f",0.01*f); }' )
spacingZ=$( awk -v delta=$delta 'BEGIN{ f=delta/0.02; printf("%.3f",0.01*f); }' )

printf "\n\nSPACING\n"
printf  "\nDo you accept spacing=[$spacingX, $spacingY, $spacingZ]?\nPress [n] to change\n"
read accept;
if [ ! -z $accept ] && [ $accept == "n" ]
then
    printf "spacingX="; read spacingX
    printf "spacingY="; read spacingY
    printf "spacingZ="; read spacingZ
fi

echo "MAGNETIC FIELD DIRECTION"

# default along the Z axis
MFx=0.0
MFy=0.0
MFz=-1.0

echo "Do you accept the default MF orientation along the Z axis?"
echo "Press [n] to calculate the direction automatically" # TODO: or [e] to enter manually"

read accept;
if [ ! -z $accept ] && [ $accept == "n" ]
then
   maximise_projection coord.xyz > $dirname/field.dat
   MFx=$( cat $dirname/field.dat | sed -e 's#{#_#g; s#}#_#g; s#,#_#g' | awk -F [_] '{ {print -$2} }')
   MFy=$( cat $dirname/field.dat | sed -e 's#{#_#g; s#}#_#g; s#,#_#g' | awk -F [_] '{ {print -$3} }')
   MFz=$( cat $dirname/field.dat | sed -e 's#{#_#g; s#}#_#g; s#,#_#g' | awk -F [_] '{ {print -$4} }')
fi

echo "Magnetic field vector coordinates: ($MFx; $MFy; $MFz)"




#MF=z
#valueInp MF $MF
#
# rotation=0.0
# printf  "\nRotation from the normal to the bond at the bond centre: $rotation degrees. Do you accept?\nPress [n] to modify\n"
# read accept;
# if [ ! -z $accept ] && [ $accept == "n" ]
# then
#     printf "Enter the index of the atom, which the plane has to go through: "
#     read atom3;
#     rotation=$(calculateRot);
#     
#     printf "Do you accept rotation to $rotation degrees?\nPress [n] to modify\n"
#     read accept;
#     if [ ! -z $accept ] && [ $accept == "n" ]
#     then
#         printf "rotation="; read rotation
#     fi  
# fi


string="s/@bond@/$bond/; s/@fixed@/$fixed/; s/@distance@/$distance/; s/@up@/$up/; s/@down@/$down/; s/@spacingX@/$spacingX/; s/@spacingY@/$spacingY/; s/@spacingZ@/$spacingZ/;  s/@rotation@/$rotation/; s/@MFx@/$MFx/; s/@MFy@/$MFy/; s/@MFz@/$MFz/; s/@FX@/$Fx/; s/@FY@/$Fy/; s/@FZ@/$Fz/ ;"
#string="s/@bond@/$bond/; s/@fixed@/$fixed/; s/@distance@/$distance/; s/@up@/$up/; s/@down@/$down/; s/@MF@/$MF/; s/@spacingX@/$spacingX/; s/@spacingY@/$spacingY/; s/@spacingZ@/$spacingZ/;  s/@rotation@/$rotation/; "
echo "./$dirname"
sed "$string" @SCRIPTS_DIR@/gimic.Inp > ./$dirname/gimic.Inp

#end=$( awk -v delta=$delta -v start=$start 'BEGIN{print delta-start}' ) 

#echo "Enter title:"
#read heading
#heading=\"$heading"\n bond=["$bond"], fixed="$fixed", in="$start", out="$out", delta="$delta", up="$up", down="$down\"
#heading=\""bond=[$bond] Fx=$Fx, Fy=$Fy, Fz=$Fz \ndelta=$delta \nspacing=[ $spacingX;$spacingY;$spacingZ] in=$start out=$out \nup=$up down=$down \ndistance=$distance"\"
#echo $heading > ./$dirname/calculation.dat

cat /dev/null > ./$dirname/calculation.dat
#echo bond=[$bond] > ./$dirname/calculation.dat
echo atom1=$atom1  >> ./$dirname/calculation.dat
echo atom2=$atom2 >> ./$dirname/calculation.dat
echo fixed point: Fx=$Fx, Fy=$Fy, Fz=$Fz  >> ./$dirname/calculation.dat
echo magnetic field: Mx=$Mx, My=$My, Mz=$Mz  >> ./$dirname/calculation.dat
echo distance=$distance >> ./$dirname/calculation.dat
echo in=$start out=$out up=$up down=$down  >> ./$dirname/calculation.dat
echo delta=$delta \nspacing=[ $spacingX ; $spacingY ; $spacingZ ]  >> ./$dirname/calculation.dat

################################################################################

#printf "\nnsteps="$nsteps", delta="$delta", spacing="$spacing", in="$start", out="$out", up="$up", down="$down", bond=["$bond"], fixed="$fixed"\n"
printf "\n\n*****************************************************************************\n\nSUMMARY\n\n"
printf "Bond: ["$bond"]\n"
printf "Fixed coordinate: ( $Fx; $Fy; $Fz )\n"
echo "Integration plane coordinates"
printf "in = $start  out = $out  up = $up  down = $down \n"
printf "Split into $nsteps slices with width $delta and grid spacing [$spacingX; $spacingY; $spacingZ] \n"
printf "Magnetic field direction: ( $MFx; $MFy; $MFz ) \n\n"

printf "\n*****************************************************************************\n\n"

xstart=$( awk -v delta=$delta -v start=$start 'BEGIN{printf "%.3f\n", -start }' )  # start is a negative number 
xend=$( awk -v delta=$delta -v xstart=$xstart 'BEGIN{ printf "%.3f\n", xstart+delta }' ) 
#xend=$( awk -v delta=$delta -v start=$start 'BEGIN{ if (start < 0) {print start+delta} else {print start-delta}; }' ) 
#xend=$( awk -v i=$i -v delta=$delta -v end=$end 'BEGIN{printf "%.3f\n", end+delta*i }' )
smaller=$(awk -v start=$xstart -v end=$xend 'BEGIN{ if (start > end) {print "1"} else {print "0"} }')
if [ $smaller -eq 1 ]
then
    tmp=$xstart
    xstart=$xend
    xend=$tmp
fi
string=" s/@start@/$xstart/; s/@end@/$xend/; s/@up@/$xup/; s/@down@/$xdown/"
sed "$string" ./$dirname/gimic.Inp > ./$dirname/gimic.0.inp

printf "\nPerforming a dry run...\n\n"
(cd ./$dirname/ && gimic --dryrun gimic.0.inp | grep "grid points" )
printf "\n\n"

echo "Do you accept the above parameters? Press [n] to cancel."; read accept
if  [ ! -z $accept ] && [ $accept == "n" ]
then
    exit
fi


echo "Preparing input files..."
for (( i=1; i<$nsteps; i++ ))
do
    xstart=$( awk -v xstart=$xstart -v delta=$delta 'BEGIN{printf "%.3f\n", xstart+delta }' )
    xend=$( awk -v delta=$delta -v xstart=$xstart 'BEGIN{ printf "%.3f\n", xstart+delta }' ) 
#    xstart=$( awk -v i=$i -v delta=$delta -v start=$start 'BEGIN{printf "%.3f\n", start+delta*i }' )
#    xend=$( awk -v i=$i -v delta=$delta -v end=$end 'BEGIN{printf "%.3f\n", end+delta*i }' )
#    if [ $smaller -eq 1 ]
#    then
#        tmp=$xstart
#        xstart=$xend
#        xend=$tmp
#    fi
    string=" s/@start@/$xstart/; s/@end@/$xend/"
    sed "$string" $dirname/gimic.Inp > $dirname/gimic.$i.inp
done    
echo "done"

# sanity check for the integration plane

planeSanityCheck $dirname




# Submit the calculation

wrkdir=$(pwd)
wrkdir=$(echo $wrkdir/$dirname)
echo "Working directory:"; echo $wrkdir; echo

#echo "Running Gimic calculations..."

filenum=$(ls $wrkdir/*inp | wc -l)
#filenum=$(echo $nsteps)

parallel=4

echo "How many parallel tasks to execute?"
read parallel

# check if too many parallel tasks are called
if [ $parallel -gt $nsteps ]
then
    $parallel=$($nsteps)
fi

sbatch --ntasks="$parallel" --job-name="$dirname" @SCRIPTS_DIR@/jobscript "$wrkdir" "$parallel" 
echo

