#!/bin/bash

# Function definitions:
source @SCRIPTS_DIR@/functions-def

checkIfInputExists

printf "\nPREPARING CURRENT DENSITY INTEGRATION\n"
printf "\nUsing atomic units of length\n\n"

echo "Define the bond perpendicular to which to integrate"; echo
echo "Enter the indices of the atoms according to the coord file"
printf "Atom 1:  "; read atom1; 
printf "Atom 2:  "; read atom2

# Read the coordinates of atom1:
A1x=$( awk -v atom1=$atom1 '{ if (NR==(atom1+1)) {print $1} }' coord  )
A1y=$( awk -v atom1=$atom1 '{ if (NR==(atom1+1)) {print $2} }' coord  )
A1z=$( awk -v atom1=$atom1 '{ if (NR==(atom1+1)) {print $3} }' coord  )

# Read the coordinates of atom2:
A2x=$( awk -v atom2=$atom2 '{ if (NR==(atom2+1)) {print $1} }' coord  )
A2y=$( awk -v atom2=$atom2 '{ if (NR==(atom2+1)) {print $2} }' coord  )
A2z=$( awk -v atom2=$atom2 '{ if (NR==(atom2+1)) {print $3} }' coord  )
echo "Enter the suffix for the directory name"
read suffix
suffix=$(printf _$suffix)
dirname=bond_int_$atom1.$atom2$suffix
#echo $dirname

checkIfPreviousCalculationExists $dirname

# Calculate the distance between the atoms
echo "Define where between the two atoms the integration plane passes"
echo "Default: through the midpoint"
distance=$( halfDistance $atom1 $atom2 )
valueInp distance $distance

# Coordinates of the centre of the bond:
bond=$atom1","$atom2
BOND=$(centroid $atom1 $atom2)
Bx=$( echo $BOND | awk '{print $1} ' )
By=$( echo $BOND | awk '{print $2} ' )
Bz=$( echo $BOND | awk '{print $3} ' )

#echo "Bond centre coordinates:"
#printf "("$Bx";"$By";"$Bz")\n"
#echo

printf "\n\nSTARTING POINT OF THE INTEGRATION\n"
userInp start $start
tmp=$( awk -v start=$start 'BEGIN{ print -start }' )
start=$tmp

printf "\nEND POINT OF THE INTEGRATION\n"
out=10
printf "\nDo you accept out=$out bohr?"
userInp out $out

printf "\n\nUPPER AND LOWER BOUNDS OF THE INTEGRATION\n"
up=10
down=-10
valueInp up $up 
valueInp down $down

printf "\n\nGRID POINT SPACING\n"
spacingX=1.000
spacingY=0.010
spacingZ=0.010
printf  "\nDo you accept spacing=[$spacingX, $spacingY, $spacingZ]?\nPress [n] to change\n"
read accept;
if [ ! -z $accept ] && [ $accept == "n" ]
then
    valueInp spacingX $spacingX
    valueInp spacingY $spacingY
    valueInp spacingZ $spacingZ
fi

printf "\nMAGNETIC FIELD DIRECTION\n\n"

# default along the Z axis
MFx=0.0
MFy=0.0
MFz=-1.0

echo "Do you accept the default MF orientation along the Z axis (0, 0, -1)?"
echo "Press [a] to calculate the direction automatically or [m] to enter manually"

read accept;
checkMaxProj="installed"
if [ ! -z $accept ] && [ $accept == "a" ]
then
    checkMaxProj=$(command -v maximise_projection) #  command -> returns the path of the binary if it is found
    if [ -e $checkMaxProj ]
    then
	echo "The program maximise_projection is not found. Switching to manual input of the magnetic field components."
    else
	maximise_projection coord.xyz > $dirname/field.dat
	MFx=$( cat $dirname/field.dat | sed -e 's#{#_#g; s#}#_#g; s#,#_#g' | awk -F [_] '{ {print -$2} }')
	MFy=$( cat $dirname/field.dat | sed -e 's#{#_#g; s#}#_#g; s#,#_#g' | awk -F [_] '{ {print -$3} }')
	MFz=$( cat $dirname/field.dat | sed -e 's#{#_#g; s#}#_#g; s#,#_#g' | awk -F [_] '{ {print -$4} }')
    fi
fi
if ( [ ! -z $accept ] && [ $accept == "m" ] ) || [ -e $checkMaxProj ]
then
    echo "Please enter numeric values."
    valueInp MFx $MFx
    valueInp MFy $MFy
    valueInp MFz $MFz
fi

echo "Magnetic field vector coordinates: ($MFx; $MFy; $MFz)"
echo



printf "\nFIXED COORDINATE\n"

# fixed point (Ax, Ay and Az are the coords of the bond atoms 1 and 2)
Fx=$(calculateFixedCoord $A2x $A2y $A2z | awk '{print $1}')
Fy=$(calculateFixedCoord $A2x $A2y $A2z | awk '{print $2}')
#Fz=$( awk -v A1z=$A1z -v A2z=$A2z 'BEGIN{ print (A1z+A2z)*0.5 }')
#Fz=$( awk -v A1z=$A1z -v A2z=$A2z 'BEGIN{ print A2z }')

# use the coords of atom 1 and the MF vector
# vector OA and OF defined with the coords of atom1 and the fixed point
# vector AF.MF = 0
Fz=$( awk -v Ax=$A1x -v Fx=$Fx -v Ay=$A1y -v Fy=$Fy -v Az=$A1z -v mx=$MFx -v my=$MFy -v mz=$MFz 'BEGIN{ print( ( (mx*(Fx-Ax) + my*(Fy-Ay)) / mz) + Az )}')
echo
echo "Fixed coordinate: ($Fx; $Fy; $Fz)"

echo "Do you want to modify the coordinates of the fixed point?"
echo "Press [y] enter Cartesian coordinates" 

read accept;
if [ ! -z $accept ] && [ $accept == "y" ]
then
    valueInp Fx $Fx
    valueInp Fy $Fy
    valueInp Fz $Fz

    echo "Fixed coordinate: ($Fx, $Fy, $Fz)"
fi


printf "\nROTATION OF THE PLANE\n\n"

# rotation is done with respect to the midpoint of the bond unless a rotation origin is specified
rotX=0.0
rotY=0.0
rotZ=0.0

rotationOriginEnabled=n
origX=0.0
origY=0.0
origZ=0.0

echo "Do you want to rotate the integration plane?"
echo "Press [y] enter rotation angles and origin" 

read accept;
if [ ! -z $accept ] && [ $accept == "y" ]
then
    valueInp rotX $rotX 
    valueInp rotY $rotY
    valueInp rotZ $rotZ

    echo "Rotation angles: ($rotX, $rotY, $rotZ)"

    printf "\nDo you accept the rotation origin to be at the bond midpoint?\n"
    echo "Press [n] to enter Cartesian coordinates." 

    read accept;
    if [ ! -z $accept ] && [ $accept == "n" ]
    then
	rotationOriginEnabled=y
	valueInp origX $origX 
	valueInp origY $origY
	valueInp origZ $origZ
    fi
fi




string="s/@bond@/$bond/; s/@fixed@/$fixed/; s/@distance@/$distance/; s/@up@/$up/; s/@down@/$down/; s/@start@/$start/; s/@end@/$out/; s/@FX@/$Fx/; s/@FY@/$Fy/; s/@FZ@/$Fz/; s/@MFx@/$MFx/; s/@MFy@/$MFy/; s/@MFz@/$MFz/; s/@spacingX@/$spacingX/; s/@spacingY@/$spacingY/; s/@spacingZ@/$spacingZ/; s/@rotX@/$rotX/;  s/@rotY@/$rotY/;  s/@rotZ@/$rotZ/; "
sed "$string" @SCRIPTS_DIR@/gimic.Inp > ./$dirname/gimic.inp

printf "Performing a dry run...\n\n"
(cd ./$dirname/ && gimic --dryrun gimic.inp | grep "grid points" )
printf "\n\n"

echo "Ready for analysis"

